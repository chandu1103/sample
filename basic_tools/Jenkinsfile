pipeline {
    agent any
    parameters {
                gitParameter branchFilter: 'origin/(.*)', defaultValue: 'main', name: 'Branch', type: 'PT_BRANCH'
              }

    stages {
    stage('Cloning the Project'){
        steps{
            script{
                try{
                    def cause = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')
                    slackSend (botUser: true, color: 'good', message: "Cloning the Project- nodejs-Branch-${Branch}: Job '${env.JOB_NAME} ${cause.userName} [${env.BUILD_NUMBER}]'" , channel: "test", teamDomain: 'chandu1607', tokenCredentialId: 'slack')
                    echo "flag: ${params.Branch}"
                    git branch: "${params.Branch}",  url: 'https://github.com/chandu1103/sample.git'
                   }
                catch(Exception e){
                    echo "FAILED ${e}"
                    slackSend(botUser: true, channel: 'test', color: 'danger', message: '"Failed at Cloning the Project- nodejs: Job ${env.JOB_NAME} [${env.BUILD_NUMBER}]@Burra Chandu0304"', teamDomain: 'chandu1607', tokenCredentialId: 'slack')
                    currentBuild.result = 'FAILURE'
                    throw e
                   }   
                  }
            }
        }
    stage (inventory_file_updating) {
        steps{
            script{
                try {
                    echo "${PRIVATE_IP}"
                    sh '''
                    cat << EOF > basic_tools/inventory
                    [webservers]
                    ${PRIVATE_IP}

                    [all:vars]
                    ansible_user: ubuntu
                     '''
                    slackSend(botUser: true, channel: 'test', color: 'good', message: '"UPDATED REMOTE HOST ADDRESS"' , teamDomain: 'chandu1607', tokenCredentialId: 'slack')
                    }
                catch(Exception e){
                    echo "FAILED ${e}"
                    slackSend(botUser: true, channel: 'test', color: 'danger', message: '"Failed at updating the remote host ip"', teamDomain: 'chandu1607', tokenCredentialId: 'slack')
                    currentBuild.result = 'FAILURE'
                    throw e
                    }  
                   }
            }

        }
    stage(docker_installation) {
        steps {
            script{
                    if( env.DOCKER_INPUT == "true" ) {
                    ansiblePlaybook colorized: true, credentialsId: 'private-key', disableHostKeyChecking: true, installation: 'ansible2', inventory: 'basic_tools/inventory', playbook: 'basic_tools/docker.yaml'
                            slackSend(botUser: true, channel: 'test', color: 'good', message: '"SUCCESSFULLY INSTALLED DOCKER"' , teamDomain: 'chandu1607', tokenCredentialId: 'slack')
                            }
                    else {                    
                          echo "Dokcer not installed"
                          slackSend(botUser: true, channel: 'test', color: 'warning', message: '"Failed to install docker"', teamDomain: 'chandu1607', tokenCredentialId: 'slack')
                         }
                    }
                      }
                   }


    stage(php_installation) {
        steps {
            script{
                    if( env.PHP_INPUT == "true" ) {
                    ansiblePlaybook colorized: true, credentialsId: 'private-key', disableHostKeyChecking: true, installation: 'ansible2', inventory: 'basic_tools/inventory', playbook: 'basic_tools/php.yaml'
                            slackSend(botUser: true, channel: 'test', color: 'good', message: '"SUCCESSFULLY INSTALLED php"' , teamDomain: 'chandu1607', tokenCredentialId: 'slack')
                            }
                    else {                    
                          echo "Php not installed"
                          slackSend(botUser: true, channel: 'test', color: 'warning', message: '"Failed to install Php"', teamDomain: 'chandu1607', tokenCredentialId: 'slack')
                         }
                    }
                      }
                   }               


    stage(NODE_installation) {
        steps {
            script{
                    if( env.NODE_INPUT == "true" ) {
                    ansiblePlaybook colorized: true, credentialsId: 'private-key', disableHostKeyChecking: true, installation: 'ansible2', inventory: 'basic_tools/inventory', playbook: 'basic_tools/node.yaml'
                            slackSend(botUser: true, channel: 'test', color: 'good', message: '"SUCCESSFULLY INSTALLED NODE"' , teamDomain: 'chandu1607', tokenCredentialId: 'slack')
                            }
                    else {                    
                          echo "Node not installed"
                          slackSend(botUser: true, channel: 'test', color: 'warning', message: '"Failed to install NODE"', teamDomain: 'chandu1607', tokenCredentialId: 'slack')
                         }
                    }
                      }
                   }
                

    stage(NGINX_installation) {
        steps {
            script{
                    if( env.NGNIX_INPUT == "true" ) {
                    ansiblePlaybook colorized: true, credentialsId: 'private-key', disableHostKeyChecking: true, installation: 'ansible2', inventory: 'basic_tools/inventory', playbook: 'basic_tools/ngnix.yaml'
                            slackSend(botUser: true, channel: 'test', color: 'good', message: '"SUCCESSFULLY INSTALLED NGNIX"' , teamDomain: 'chandu1607', tokenCredentialId: 'slack')
                            }
                    else {                    
                          echo "Ngnix not installed"
                          slackSend(botUser: true, channel: 'test', color: 'warning', message: '"Failed to install NGNIX"', teamDomain: 'chandu1607', tokenCredentialId: 'slack')
                         }
                    }
               }
            } 
        }
    }